apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    {{- include "workadventure.ejabberd.labels" . | nindent 4 }}
  name: {{ include "workadventure.ejabberd.name" . }}
data:
  ejabberd.template.yml: |
    ###
    ###              ejabberd configuration file
    ###
    ### The parameters used in this configuration file are explained at
    ###
    ###       https://docs.ejabberd.im/admin/configuration
    ###
    hosts:
      - ${EJABBERD_DOMAIN}

    loglevel: 3
    log_rotate_size: 10485760
    log_rotate_count: 1

    certfiles:
      - /opt/ejabberd/conf/server.pem

    ca_file: "/opt/ejabberd/conf/cacert.pem"

    ## When using let's encrypt to generate certificates
    ##certfiles:
    ##  - /etc/letsencrypt/live/localhost/fullchain.pem
    ##  - /etc/letsencrypt/live/localhost/privkey.pem
    ##
    ##ca_file: "/etc/letsencrypt/live/localhost/fullchain.pem"

    auth_method:
      - jwt
      - internal
    allow_multiple_connections: true
    auth_use_cache: false
    jwt_key: /opt/ejabberd/conf/jwt_key
    disable_sasl_mechanisms: ["X-OAUTH2"]

    #jwt_jid_field: "identifier"
    #jwt_key: "/opt/ejabberd/conf/jwtKey"

    listen:
      -
        port: 5222
        ip: "::"
        module: ejabberd_c2s
        max_stanza_size: 262144
        shaper: c2s_shaper
        access: c2s
        starttls_required: true
      -
        port: 5269
        ip: "::"
        module: ejabberd_s2s_in
        max_stanza_size: 524288
      -
        port: 5443
        ip: "::"
        module: ejabberd_http
        #tls: true
        request_handlers:
          "/admin": ejabberd_web_admin
          "/api": mod_http_api
          "/bosh": mod_bosh
          "/captcha": ejabberd_captcha
          "/upload": mod_http_upload
          "/ws": ejabberd_http_ws
          "/oauth": ejabberd_oauth
      -
        port: 5280
        ip: "::"
        module: ejabberd_http
        request_handlers:
          #"/admin": ejabberd_web_admin
          "/api": mod_http_api
          "/bosh": mod_bosh
          "/captcha": ejabberd_captcha
          "/upload": mod_http_upload
          "/ws": ejabberd_http_ws
          "/oauth": ejabberd_oauth
      -
        port: 5380
        ip: "::"
        module: ejabberd_http
        request_handlers:
          "/": ejabberd_web_admin
      -
        port: 1883
        ip: "::"
        module: mod_mqtt
        backlog: 1000

    s2s_use_starttls: optional

    acl:
      local:
        user_regexp: ""
      loopback:
        ip:
          - 127.0.0.0/8
          - ::1/128
          - ::FFFF:127.0.0.1/128
          - ::FFFF:172.19.0.0/16
      admin:
        user:
          - "${EJABBERD_USER}@${EJABBERD_DOMAIN}"
          - "${EJABBERD_USER}"
        ip:
          - ::FFFF:172.19.0.0/16

    access_rules:
      local:
        allow: local
      c2s:
        deny: blocked
        allow: all
      announce:
        allow: admin
      configure:
        allow: admin
      muc_create:
        - allow: local
        - deny: blocked
      pubsub_createnode:
        allow: local
      trusted_network:
        allow: loopback

    api_permissions:
      "console commands":
        from:
          - ejabberd_ctl
        who: all
        what: "*"
      "admin access":
        who:
          - access:
            - allow:
              - acl: loopback
              - acl: admin
          - oauth:
            - scope:
              - "${EJABBERD_DOMAIN}:admin"
            - access:
              - allow:
                - acl: loopback
                - acl: admin
        what:
          - "*"
          - "!stop"
          - "!start"
      "public commands":
        who:
          - ip: 127.0.0.1/8
        what:
          - status
          - connected_users_number

    shaper:
      normal: 1000
      fast: 50000

    shaper_rules:
      max_user_sessions: 10
      max_user_offline_messages:
        5000: admin
        100: all
      c2s_shaper:
        none: admin
        normal: all
      s2s_shaper: fast

    max_fsm_queue: 10000

    acme:
      contact: "mailto:example-admin@example.com"
      ca_url: "https://acme-staging-v02.api.letsencrypt.org/directory"

    modules:
      mod_adhoc: {}
      mod_admin_extra: {}
      mod_announce:
        access: announce
      mod_avatar: {}
      mod_blocking: {}
      mod_bosh: {}
      mod_caps: {}
      mod_carboncopy: {}
      mod_client_state: {}
      mod_configure: {}
      mod_disco: {}
      mod_fail2ban: {}
      mod_http_api: {}
      ##mod_restful_admin:
      ##  api:
      ##    - path: [ "admin" ]
      ##      module: mod_restful_admin
      ##      params:
      ##        key: "secret"
      ##        allowed_commands: [ register, unregister,status, add_rosteritem, create_room, send_direct_invitation, set_room_affiliation ]
      ##    - path: [ "register" ]
      ##      module: mod_restful_register
      ##      params:
      ##        key: "secret"
      mod_http_upload:
        put_url: https://@HOST@:5443/upload
      mod_last: {}
      mod_mam:
        ## Mnesia is limited to 2GB, better to use an SQL backend
        ## For small servers SQLite is a good fit and is very easy
        ## to configure. Uncomment this when you have SQL configured:
        ## db_type: sql
        assume_mam_usage: true
        default: never
      mod_mqtt: {}
      mod_muc:
        hosts:
          - conference.${EJABBERD_DOMAIN}
        access:
          - allow
        access_admin:
          - allow: admin
        access_create: muc_create
        access_persistent: muc_create
        access_mam:
          - allow
        default_room_options:
          allow_subscription: true  # enable MucSub
          mam: true
          persistent: true
          anonymous: false
      mod_muc_admin: {}
      mod_offline:
        access_max_user_messages: max_user_offline_messages
      mod_ping: {}
      mod_privacy: {}
      mod_private: {}
      mod_proxy65:
        access: local
        max_connections: 5
      mod_pubsub:
        access_createnode: pubsub_createnode
        plugins:
          - flat
          - pep
        force_node_config:
          ## Avoid buggy clients to make their bookmarks public
          storage:bookmarks:
            access_model: whitelist
      mod_push: {}
      mod_push_keepalive:
        resume_timeout: 72
        wake_on_start: false
        wake_on_timeout: true
      mod_register:
        ## Only accept registration requests from the "trusted"
        ## network (see access_rules section above).
        ## Think twice before enabling registration from any
        ## address. See the Jabber SPAM Manifesto for details:
        ## https://github.com/ge0rg/jabber-spam-fighting-manifesto
        ip_access: trusted_network
      mod_roster:
        versioning: true
        store_current_id: false
      mod_sip: {}
      mod_s2s_dialback: {}
      mod_shared_roster: {}
      mod_stream_mgmt:
        ack_timeout: infinity
        resend_on_timeout: if_offline
        resume_timeout: 0
      mod_vcard: {}
      mod_vcard_xupdate: {}
      mod_version:
        show_os: false

    websocket_ping_interval: 300
    websocket_timeout: 900
    ### Local Variables:
    ### mode: yaml
    ### End:
    ### vim: set filetype=yaml tabstop=8
